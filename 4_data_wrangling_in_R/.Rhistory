# Train the model with current set of hyperparameters
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
print(X)
# print(str(X))
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i])
# Predict and calculate MAE
predictions <- predict(mc.forest, newdata = new_table[, !(names(new_table) %in% c("Treatment", "Tau", "OUTCOME"))], drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
print(X)
print(str(X))
str(X)
sum(is.na(X))
selected_treatment <- "Treatment1"  # replace with your actual column name
selected_tau <- "Tau1"              # replace with your actual column name
# Data Preparation
cols_to_keep <- setdiff(names(synthetic_data), c(treatment_columns, tau_columns, "OUTCOME"))
new_table <- synthetic_data[, cols_to_keep]
new_table$Treatment <- synthetic_data[[selected_treatment]]
new_table$Tau <- synthetic_data[[selected_tau]]
new_table$OUTCOME <- synthetic_data$OUTCOME + synthetic_data[[selected_treatment]] * synthetic_data[[selected_tau]]
# Define a range of hyperparameters to test
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.5, 0.7))
# Placeholder for MAE results
mae_results <- numeric(nrow(param_grid))
X <- synthetic_data %>% select(Snap_Percentage_Vulnerable, Male_Population, Female_Population,
Median_Age, Total_Population, Race_White, Unemployed, Education_25_Over,
Total_Pop_Below_Poverty, Year, Month) %>%
mutate(Month = as.numeric(as.character(Month)))
# Iterate over each set of hyperparameters
for(i in 1:nrow(param_grid)) {
# Train the model with current set of hyperparameters
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
print(X)
print(str(X))
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i])
# Predict and calculate MAE
predictions <- predict(mc.forest, newdata = new_table[, !(names(new_table) %in% c("Treatment", "Tau", "OUTCOME"))], drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
# Iterate over each set of hyperparameters
for(i in 1:nrow(param_grid)) {
# Train the model with current set of hyperparameters
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i])
predictions <- predict(mc.forest, newdata = X, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
mae_results
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.3, 0.5))
selected_treatment <- "Treatment1"  # replace with your actual column name
selected_tau <- "Tau1"              # replace with your actual column name
# Data Preparation
cols_to_keep <- setdiff(names(synthetic_data), c(treatment_columns, tau_columns, "OUTCOME"))
new_table <- synthetic_data[, cols_to_keep]
new_table$Treatment <- synthetic_data[[selected_treatment]]
new_table$Tau <- synthetic_data[[selected_tau]]
new_table$OUTCOME <- synthetic_data$OUTCOME + synthetic_data[[selected_treatment]] * synthetic_data[[selected_tau]]
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.3, 0.5))
# Placeholder for MAE results
mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i])
predictions <- predict(mc.forest, newdata = X, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
varying_grf_hyperparameters <- function() {
selected_treatment <- "Treatment1"
selected_tau <- "Tau1"
# Data Preparation
cols_to_keep <- setdiff(names(synthetic_data), c(treatment_columns, tau_columns, "OUTCOME"))
new_table <- synthetic_data[, cols_to_keep]
new_table$Treatment <- synthetic_data[[selected_treatment]]
new_table$Tau <- synthetic_data[[selected_tau]]
new_table$OUTCOME <- synthetic_data$OUTCOME + synthetic_data[[selected_treatment]] * synthetic_data[[selected_tau]]
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.3, 0.5))
# Placeholder for MAE results
mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
results <- cbind(param_grid, MAE = mae_results)
print(results)
}
selected_treatment <- "Treatment1"
selected_tau <- "Tau1"
# Data Preparation
cols_to_keep <- setdiff(names(synthetic_data), c(treatment_columns, tau_columns, "OUTCOME"))
new_table <- synthetic_data[, cols_to_keep]
new_table$Treatment <- synthetic_data[[selected_treatment]]
new_table$Tau <- synthetic_data[[selected_tau]]
new_table$OUTCOME <- synthetic_data$OUTCOME + synthetic_data[[selected_treatment]] * synthetic_data[[selected_tau]]
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.3, 0.5))
# Placeholder for MAE results
mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
results <- cbind(param_grid, MAE = mae_results)
print(results)
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.6, 0.7))
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.6, 0.7))
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
install.packages("grf")
install.packages("grf")
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.6, 0.7))
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
ci.group.size = 1,  # Setting this explicitly
honesty = FALSE    # Disabling honesty to check behavior
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
print(results)
results <- cbind(param_grid, MAE = mae_results)
print(results)
varying_grf_hyperparameters <- function() {
selected_treatment <- "Treatment1"
selected_tau <- "Tau1"
# Data Preparation
cols_to_keep <- setdiff(names(synthetic_data), c(treatment_columns, tau_columns, "OUTCOME"))
new_table <- synthetic_data[, cols_to_keep]
new_table$Treatment <- synthetic_data[[selected_treatment]]
new_table$Tau <- synthetic_data[[selected_tau]]
new_table$OUTCOME <- synthetic_data$OUTCOME + synthetic_data[[selected_treatment]] * synthetic_data[[selected_tau]]
param_grid <- expand.grid(num_trees = c(500, 1000, 2000), min_node_size = c(5, 10), sample_fraction = c(0.6, 0.7))
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
ci.group.size = 1,  # Setting this explicitly
honesty = TRUE    # Disabling honesty to check behavior
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
results <- cbind(param_grid, MAE = mae_results)
print(results)
}
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
ci.group.size = 1,  # Setting this explicitly
honesty = FALSE    # Disabling honesty to check behavior
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
results <- cbind(param_grid, MAE = mae_results)
print(results)
param_grid <- expand.grid(num_trees = c(2000, 3000), min_node_size = c(10, 20), sample_fraction = c(0.5, 0.7))
param_grid <- expand.grid(num_trees = c(2000, 3000), min_node_size = c(10, 20), sample_fraction = c(0.5, 0.7))
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
ci.group.size = 1,  # Setting this explicitly
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
results <- cbind(param_grid, MAE = mae_results)
results <- cbind(param_grid, MAE = mae_results)
mae_results
param_grid
results <- cbind(param_grid, MAE = mae_results[1:8])
print(results)
param_grid <- expand.grid(num_trees = c(3000), min_node_size = c(10, 15), sample_fraction = c(0.6, 0.7, 0.8))
table(Treatment3)
table(synthetic_data$Treatment3)
table(synthetic_data$Treatment3_a)
table(synthetic_data$Treatment3_b)
table(synthetic_data$Treatment_b)
table(synthetic_data$Treatment2_b)
table(synthetic_data$Treatment1_b)
table(synthetic_data$Treatment5_b)
table(synthetic_data$Treatment6_b)
table(synthetic_data$Treatment2_b)
table(synthetic_data$Treatment5_b)
View(attempt)
table(attempt$Treatment2)
table(attempt$Treatment2_a)
table(attempt$Treatment2_b)
table(attempt$Treatment5)
table(attempt$Treatment5_a)
table(attempt$Treatment5_b)
table(attempt$Treatment6)
table(attempt$Treatment6_a)
table(attempt$Treatment6_b)
mae_results
param_grid
results
results <- cbind(param_grid, MAE = mae_results[1:8])
results <- cbind(param_grid, MAE = mae_results[1:6])
print(results)
param_grid <- expand.grid(num_trees = c(3000), min_node_size = c(10, 15), sample_fraction = c(0.6, 0.8, 1.0))
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
ci.group.size = 1,  # Setting this explicitly
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
results <- cbind(param_grid, MAE = mae_results[1:6])
print(results)
param_grid <- expand.grid(num_trees = c(3000), min_node_size = c(5, 10, 15), sample_fraction = c(.9, .999))
# Placeholder for MAE results
# mae_results <- numeric(nrow(param_grid))
for(i in 1:nrow(param_grid)) {
W <- factor(new_table$Treatment)
W <- relevel(W, ref = "0")
mc.forest <- multi_arm_causal_forest(X = X,
Y = new_table$OUTCOME,
W = W,
num.trees = param_grid$num_trees[i],
min.node.size = param_grid$min_node_size[i],
sample.fraction = param_grid$sample_fraction[i],
compute.oob.predictions = FALSE,
ci.group.size = 1,  # Setting this explicitly
)
predictions <- predict(mc.forest, drop = TRUE)$predictions
mae_results[i] <- mean(abs(predictions - new_table$Tau), na.rm = TRUE)
}
results <- cbind(param_grid, MAE = mae_results[1:6])
print(results)
synthetic_data <- prepare_synthetic_data(hip_trx) %>% select(c(CLIENT_ZIP, YearMonth,
Snap_Percentage_Vulnerable, Male_Population, Female_Population,
Median_Age, Total_Population, Race_White, Unemployed, Education_25_Over,
Total_Pop_Below_Poverty, Year, Month, OUTCOME))
synthetic_data[, c("positive_treatment", "negative_treatment", "neutral_treatment")] <- 0
selected_rows <- sample(nrow(synthetic_data), nrow(synthetic_data) / 5)
for (row in selected_rows) {
chosen_treatment <- sample(c("positive_treatment", "negative_treatment", "neutral_treatment"), 1)
synthetic_data[row, chosen_treatment] <- 1
}
# making the different treatment levels for the W in grf (0 is no treatment, 1 is negative treatment, 2 is neutral treatment, 3 is positive treatment)
synthetic_data$treatment_grf <- with(synthetic_data, {
ifelse(positive_treatment == 1 & negative_treatment == 1, 2,
ifelse(positive_treatment == 1, 3,
ifelse(negative_treatment == 1, 1,
ifelse(neutral_treatment == 1, 2, 0)
)
)
)
})
for (size in c(2,5,10,15)) {
synthetic_data$tau <- mean(synthetic_data$OUTCOME) * (size / 100)
synthetic_data$OUTCOME <- synthetic_data$OUTCOME + synthetic_data$positive_treatment * tau - synthetic_data$negative_treatment * tau
mc.forest <- multi_arm_causal_forest(X = X, Y = synthetic_data$OUTCOME, W = factor(synthetic_data$treatment_grf))
synthetic_data$result <- predict(mc.forest, drop = TRUE)$predictions
names(synthetic_data)[names(synthetic_data) == "1 - 0"] <- "neg_grf"
names(synthetic_data)[names(synthetic_data) == "2 - 0"] <- "neutral_grf"
names(synthetic_data)[names(synthetic_data) == "3 - 0"] <- "pos_grf"
write.csv(synthetic_data, paste0("/Users/eyzhang/Dropbox (MIT)/DTA/causal_inference/benchmark1-1-24/data/benchmark_constant", size, ".csv"), row.names = FALSE)
}
View(synthetic_data)
table(synthetic_data$positive_treatment)
for (size in c(2,5,10,15)) {
synthetic_data$tau <- mean(synthetic_data$OUTCOME) * (size / 100)
synthetic_data$OUTCOME <- synthetic_data$OUTCOME + synthetic_data$positive_treatment * synthetic_data$tau - synthetic_data$negative_treatment * synthetic_data$tau
mc.forest <- multi_arm_causal_forest(X = X, Y = synthetic_data$OUTCOME, W = factor(synthetic_data$treatment_grf))
synthetic_data$result <- predict(mc.forest, drop = TRUE)$predictions
names(synthetic_data)[names(synthetic_data) == "1 - 0"] <- "neg_grf"
names(synthetic_data)[names(synthetic_data) == "2 - 0"] <- "neutral_grf"
names(synthetic_data)[names(synthetic_data) == "3 - 0"] <- "pos_grf"
write.csv(synthetic_data, paste0("/Users/eyzhang/Dropbox (MIT)/DTA/causal_inference/benchmark1-1-24/data/benchmark_constant", size, ".csv"), row.names = FALSE)
}
size <- 2
synthetic_data$tau <- mean(synthetic_data$OUTCOME) * (size / 100)
synthetic_data$OUTCOME <- synthetic_data$OUTCOME + synthetic_data$positive_treatment * synthetic_data$tau - synthetic_data$negative_treatment * synthetic_data$tau
size <- 5
synthetic_data$tau <- mean(synthetic_data$OUTCOME) * (size / 100)
synthetic_data$OUTCOME <- synthetic_data$OUTCOME + synthetic_data$positive_treatment * synthetic_data$tau - synthetic_data$negative_treatment * synthetic_data$tau
synthetic_data <- prepare_synthetic_data(hip_trx) %>% select(c(CLIENT_ZIP, YearMonth,
Snap_Percentage_Vulnerable, Male_Population, Female_Population,
Median_Age, Total_Population, Race_White, Unemployed, Education_25_Over,
Total_Pop_Below_Poverty, Year, Month, OUTCOME))
synthetic_data[, c("positive_treatment", "negative_treatment", "neutral_treatment")] <- 0
selected_rows <- sample(nrow(synthetic_data), nrow(synthetic_data) / 5)
for (row in selected_rows) {
chosen_treatment <- sample(c("positive_treatment", "negative_treatment", "neutral_treatment"), 1)
synthetic_data[row, chosen_treatment] <- 1
}
# making the different treatment levels for the W in grf (0 is no treatment, 1 is negative treatment, 2 is neutral treatment, 3 is positive treatment)
synthetic_data$treatment_grf <- with(synthetic_data, {
ifelse(positive_treatment == 1 & negative_treatment == 1, 2,
ifelse(positive_treatment == 1, 3,
ifelse(negative_treatment == 1, 1,
ifelse(neutral_treatment == 1, 2, 0)
)
)
)
})
for (size in c(2,5,10,15)) {
new_table <- synthetic_data
new_table$tau <- mean(new_table$OUTCOME) * (size / 100)
new_table$OUTCOME <- new_table$OUTCOME + new_table$positive_treatment * new_table$tau - new_table$negative_treatment * new_table$tau
mc.forest <- multi_arm_causal_forest(X = X, Y = new_table$OUTCOME, W = factor(new_table$treatment_grf))
new_table$result <- predict(mc.forest, drop = TRUE)$predictions
names(new_table)[names(new_table) == "1 - 0"] <- "neg_grf"
names(new_table)[names(new_table) == "2 - 0"] <- "neutral_grf"
names(new_table)[names(new_table) == "3 - 0"] <- "pos_grf"
write.csv(new_table, paste0("/Users/eyzhang/Dropbox (MIT)/DTA/causal_inference/benchmark1-1-24/data/benchmark_constant", size, ".csv"), row.names = FALSE)
}
rnorm
rnorm?
new_table <- synthetic_data
mean(new_table$OUTCOME)
1664.553 * 2/100
1664.553 * 5/100
1664.553 * 10/100
1664.553 * 15/100
synthetic_data <- prepare_synthetic_data(hip_trx) %>% select(c(CLIENT_ZIP, YearMonth,
Snap_Percentage_Vulnerable, Male_Population, Female_Population,
Median_Age, Total_Population, Race_White, Unemployed, Education_25_Over,
Total_Pop_Below_Poverty, Year, Month, OUTCOME))
synthetic_data[, c("positive_treatment", "negative_treatment", "neutral_treatment")] <- 0
selected_rows <- sample(nrow(synthetic_data), nrow(synthetic_data) / 5)
for (row in selected_rows) {
chosen_treatment <- sample(c("positive_treatment", "negative_treatment", "neutral_treatment"), 1)
synthetic_data[row, chosen_treatment] <- 1
}
# making the different treatment levels for the W in grf (0 is no treatment, 1 is negative treatment, 2 is neutral treatment, 3 is positive treatment)
synthetic_data$treatment_grf <- with(synthetic_data, {
ifelse(positive_treatment == 1 & negative_treatment == 1, 2,
ifelse(positive_treatment == 1, 3,
ifelse(negative_treatment == 1, 1,
ifelse(neutral_treatment == 1, 2, 0)
)
)
)
})
for (size in c(2,5,10,15)) {
new_table <- synthetic_data
error_terms <- rnorm(nrow(new_table), mean = 0, sd = size)
new_table$tau <- mean(new_table$OUTCOME) * (size / 100) + error_terms
new_table$OUTCOME <- new_table$OUTCOME + new_table$positive_treatment * new_table$tau - new_table$negative_treatment * new_table$tau
mc.forest <- multi_arm_causal_forest(X = X, Y = new_table$OUTCOME, W = factor(new_table$treatment_grf))
new_table$result <- predict(mc.forest, drop = TRUE)$predictions
names(new_table)[names(new_table) == "1 - 0"] <- "neg_grf"
names(new_table)[names(new_table) == "2 - 0"] <- "neutral_grf"
names(new_table)[names(new_table) == "3 - 0"] <- "pos_grf"
write.csv(new_table, paste0("/Users/eyzhang/Dropbox (MIT)/DTA/causal_inference/benchmark1-1-24/data/benchmark_constant", size, ".csv"), row.names = FALSE)
}
for (size in c(2,5,10,15)) {
new_table <- synthetic_data
error_terms <- rnorm(nrow(new_table), mean = 0, sd = size*2)
new_table$tau <- mean(new_table$OUTCOME) * (size / 100) + error_terms
new_table$OUTCOME <- new_table$OUTCOME + new_table$positive_treatment * new_table$tau - new_table$negative_treatment * new_table$tau
mc.forest <- multi_arm_causal_forest(X = X, Y = new_table$OUTCOME, W = factor(new_table$treatment_grf))
new_table$result <- predict(mc.forest, drop = TRUE)$predictions
names(new_table)[names(new_table) == "1 - 0"] <- "neg_grf"
names(new_table)[names(new_table) == "2 - 0"] <- "neutral_grf"
names(new_table)[names(new_table) == "3 - 0"] <- "pos_grf"
write.csv(new_table, paste0("/Users/eyzhang/Dropbox (MIT)/DTA/causal_inference/benchmark1-1-24/data/benchmark_constant", size, ".csv"), row.names = FALSE)
}
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(tidyverse)
library(lubridate)
library(broom)
library(leaflet)
library(tidyverse)
library(lubridate)
library(broom)
library(leaflet)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
install.packages("leaflet")
setwd("~/Dropbox (Personal)/15.S60_2023/5_data_wrangling_in_R")
# Read in the listings and the prices_modeled dataframes
listings <- read_csv('data/assignment/listings.csv')
# Read in the listings and the prices_modeled dataframes
listings <- read_csv('data/assignment/listings.csv')
prices_modeled <- read_csv('data/assignment/prices_modeled.csv')
View(prices_modeled)
